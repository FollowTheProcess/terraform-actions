name: Terraform Plan

on:
  workflow_call:
    inputs:
      terraform-version:
        description: The version of Terraform to install and run
        type: string
        required: false
        default: latest

      timeout-minutes:
        description: Maximum number of minutes to allow for workflow execution, will be cancelled when timeout is met
        type: number
        required: false
        default: 10

      backend-config:
        description: Optional path to a .tfbackend file (relative to `cwd`) to use for initialisation
        type: string
        required: false
        default: ""

      var-file:
        description: Optional path to a .tfvars file (relative to `cwd`) to use for the plan
        type: string
        required: false
        default: ""

      cwd:
        description: The working directory to be in for the entire workflow
        type: string
        required: false
        default: "."

    outputs:
      plan-filename:
        description: The filename of the produced .tfplan file, can be passed to actions/download-artifact as `path`
        value: ${{ jobs.plan.outputs.plan-filename }}

      plan-artifact-name:
        description: The name of the uploaded artifact, can be passed to actions/download-artifact as `name`
        value: ${{ jobs.plan.outputs.plan-artifact-name }}

      plan-download-url:
        description: The URL to download the produced plan
        value: ${{ jobs.plan.outputs.plan-download-url }}

      github-run-id:
        description: The ID of the GitHub Actions run publishing the plan, can be used by other actions/workflows to retrieve it
        value: ${{ github.run_id }}

permissions:
  contents: read

env:
  # https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_in_automation
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  TERRAFORM_PLAN_FILE: ${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}.tfplan

jobs:
  plan:
    name: Plan
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    outputs:
      plan-filename: ${{ steps.plan.outputs.terraform-plan-file }}
      plan-artifact-name: ${{ steps.generate-name.outputs.artifact-name }}
      plan-download-url: ${{ steps.upload.outputs.artifact-url }}
    defaults:
      run:
        working-directory: ${{ inputs.cwd }}
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: true

      - name: Create Terraform Cache
        run: mkdir --parents ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Initialise Terraform
        if: inputs.backend-config != ''
        run: terraform init -backend-config=${{ inputs.backend-config }}

      - name: Initialise Terraform
        if: inputs.backend-config == ''
        run: terraform init

      - name: Terraform Plan
        id: plan
        continue-on-error: true # So we can show the plan even if the exit code is non zero
        run: |
          if [[ "${{ inputs.var-file }}" != "" ]]; then
            terraform plan -var-file=${{ inputs.var-file }} -detailed-exitcode -out=${{ env.TERRAFORM_PLAN_FILE }}
          else
            terraform plan -detailed-exitcode -out=${{ env.TERRAFORM_PLAN_FILE }}
          fi

          echo "terraform-plan-file=${{ env.TERRAFORM_PLAN_FILE }}"
          echo "terraform-plan-file=${{ env.TERRAFORM_PLAN_FILE }}" >> $GITHUB_OUTPUT

      - name: Generate Artifact Name
        id: generate-name
        shell: bash
        run: |
          if [[ ${{ inputs.cwd }} == '.' ]]; then
            echo "artifact-name=terraform-plan-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}"
            echo "artifact-name=terraform-plan-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
          else
            SANITISED_WORKING_DIRECTORY=$(echo ${{ inputs.cwd }} | tr "/" "-")
            echo "artifact-name=terraform-plan-$SANITISED_WORKING_DIRECTORY-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}"
            echo "artifact-name=terraform-plan-$SANITISED_WORKING_DIRECTORY-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Plan
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.generate-name.outputs.artifact-name }}
          path: |
            ${{ inputs.cwd }}/${{ steps.plan.outputs.terraform-plan-file }}

      # Note: single quotes are important as backticks (``) in old school bash mean "go run this command"
      # equivalent to $(something), single quotes force interpreting as a string
      #
      # The tee /dev/null is a workaround for how NodeJS deals with pipes and large terraform plans
      # basically we need to "drain" the output of terraform show or Node will report an EPIPE error
      # because lots of things in GitHub actions are secretly run inside Node
      # https://stackoverflow.com/questions/12329816/error-write-epipe-when-piping-node-output-to-head
      # 
      # This step is only run if the detailed exitcode is 2 (which means plan was successful and there were changes)
      - name: Write Plan to Step Summary
        if: steps.plan.outputs.exitcode == '2' # https://developer.hashicorp.com/terraform/cli/commands/plan#detailed-exitcode
        run: |
          echo '## Terraform Plan' >> $GITHUB_STEP_SUMMARY
          echo '```shell' >> $GITHUB_STEP_SUMMARY
          terraform show -no-color ${{ steps.plan.outputs.terraform-plan-file }} | tee /dev/null | head --bytes 20480  >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "*[Plan will be truncated at 20kb, check logs or download the full plan from the artifact]*" >> $GITHUB_STEP_SUMMARY

      - name: Fail Build if Necessary
        if: steps.plan.outputs.exitcode == '1'
        run: echo "::error::Terraform plan failed, see action logs for details" && exit 1

      - name: Communicate No Changes
        if: steps.plan.outputs.exitcode == '0'
        run: echo "::notice::No Terraform changes in the plan, nothing to show ðŸ˜´"
